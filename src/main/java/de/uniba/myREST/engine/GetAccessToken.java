package de.uniba.myREST.engine;

import com.google.common.util.concurrent.FutureCallback;
import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.SettableFuture;
import com.wrapper.spotify.Api;
import com.wrapper.spotify.methods.authentication.ClientCredentialsGrantRequest;
import com.wrapper.spotify.models.ClientCredentials;

import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Generates Access Token for authenticated call to Spotify Web API
 * @author Created by chandan on 06.09.16.
 */
public class GetAccessToken {

    /*
     * Enable logging at the class level
     */
    private static Logger loggerGetAccessToken = Logger.getLogger(GetAccessToken.class.getName());

    /*
     * Client ID and and Client Secret generated by Application registration should go here
     */
    private static String clientId = "61eb0513e07848a5a3933a55caf26ef4";
    private static String clientSecret = "f6c4608edb0448e78edad58ff2036981";

    private static String myAccessToken;


    /**
     * Delivers the secret Access Token for API method calls
     * @return {String}
     */
    public static String deliverAccessToken(){
        loggerGetAccessToken.log(Level.INFO,"Access Token Delivered on demand");
        generateToken();
        return myAccessToken;
    }

    /**
     * Returns the Access token for authenticated call to Spotify Web API
     * Code for generating access token has been made available for public access by Michael Thelin(https://github.com/thelinmichael)
     * @return {String}
     *
     */
    public static void generateToken(){

        loggerGetAccessToken.setLevel(Level.ALL);
        loggerGetAccessToken.info("Class GetAccessToken/Method generateToken: Start Logging");

        /*
         * Building the API request with client credentials.
         */
        final Api api = Api.builder()
                .clientId(clientId)
                .clientSecret(clientSecret)
                .build();

        /*
		 *Create a request object.
		 */
        final ClientCredentialsGrantRequest request = api.clientCredentialsGrant().build();

        /*
         *Use the request object to make the request, either asynchronously (getAsync) or synchronously (get)
         */
        final SettableFuture<ClientCredentials> responseFuture = request.getAsync();

        /*
         *Add callbacks to handle success and failure
         */
        Futures.addCallback(responseFuture, new FutureCallback<ClientCredentials>() {
            @Override
            public void onSuccess(ClientCredentials clientCredentials) {
			    /*
			     *If the tokens were retrieved successfully!
			     */
                loggerGetAccessToken.log(Level.INFO,"Bingo !! Successfully generated an access token");
                loggerGetAccessToken.log(Level.WARNING,"The access token expires in " + clientCredentials.getExpiresIn() + " seconds");

			    /*
			     *Set access token on the Api object so that it's used going forward
			     */
                api.setAccessToken(clientCredentials.getAccessToken());
                myAccessToken = clientCredentials.getAccessToken();
			    //Please note that this flow does not return a refresh token.//
			   //That's only for the Authorization code flow//
            }

            @Override
            public void onFailure(Throwable throwable) {
                loggerGetAccessToken.log(Level.SEVERE,"An error occurred while getting the access token");
                loggerGetAccessToken.log(Level.WARNING,"Could be caused by the Invalid Client ID or Client Secret");
            }
        });
        loggerGetAccessToken.log(Level.INFO,"Class GetAccessToken/Method generateToken: Done Logging");

    }

}
